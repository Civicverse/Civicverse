// ===== CivicVerse Alpha 3 Firestarter v2.0 - Full Code Bundle =====

// --- 1. coreNode.js ---
// Peer-to-peer mesh node with NAT traversal, messaging, mining stub, and ethics checks

const WebSocket = require('ws');
const SimplePeer = require('simple-peer');
const EventEmitter = require('events');
const crypto = require('crypto');
const fs = require('fs');
const path = require('path');

class CivicNode extends EventEmitter {
  constructor(config) {
    super();
    this.id = crypto.randomBytes(8).toString('hex');
    this.peers = new Map(); // peerId -> peer instance
    this.config = config;
    this.dbFile = path.resolve(config.dataDir, 'nodeData.json');
    this.data = { messages: [], blockchain: [], walletBalance: 0 };
    this.loadData();
    this.signalingSocket = null;
    this.initSignaling();
  }

  loadData() {
    if (fs.existsSync(this.dbFile)) {
      this.data = JSON.parse(fs.readFileSync(this.dbFile));
    } else {
      this.persistData();
    }
  }

  persistData() {
    fs.writeFileSync(this.dbFile, JSON.stringify(this.data, null, 2));
  }

  initSignaling() {
    this.signalingSocket = new WebSocket(this.config.signalingServer);
    this.signalingSocket.on('open', () => {
      this.signalingSocket.send(JSON.stringify({ type: 'register', id: this.id }));
    });
    this.signalingSocket.on('message', msg => {
      const data = JSON.parse(msg);
      if (data.type === 'peer-list') {
        data.peers.forEach(peerId => {
          if (peerId !== this.id && !this.peers.has(peerId)) this.connectToPeer(peerId);
        });
      } else if (data.type === 'signal' && data.to === this.id) {
        const peer = this.peers.get(data.from);
        if (peer) peer.signal(data.signal);
        else this.setupPeer(data.from, false, data.signal);
      }
    });
  }

  connectToPeer(peerId) {
    this.setupPeer(peerId, true);
  }

  setupPeer(peerId, initiator, incomingSignal) {
    const peer = new SimplePeer({ initiator, trickle: false });
    peer.on('signal', signal => {
      this.signalingSocket.send(JSON.stringify({
        type: 'signal', from: this.id, to: peerId, signal
      }));
    });
    peer.on('connect', () => this.emit('peer-connect', peerId));
    peer.on('data', data => this.handleData(peerId, data));
    peer.on('close', () => { this.peers.delete(peerId); this.emit('peer-disconnect', peerId); });
    peer.on('error', e => console.error('Peer error:', e));
    if (incomingSignal) peer.signal(incomingSignal);
    this.peers.set(peerId, peer);
  }

  handleData(peerId, data) {
    try {
      const message = JSON.parse(data.toString());
      if (this.checkEthics(message)) {
        this.data.messages.push({ from: peerId, message, timestamp: Date.now() });
        this.persistData();
        this.emit('message', peerId, message);
      } else {
        this.emit('ethics-violation', peerId, message);
      }
    } catch {
      console.warn('Malformed message from peer:', peerId);
    }
  }

  checkEthics(message) {
    // Fryboy Test: No hate speech, spam, or disallowed content
    const bannedWords = ['hate', 'spam', 'malware'];
    const msgText = (typeof message.text === 'string') ? message.text.toLowerCase() : '';
    return !bannedWords.some(word => msgText.includes(word));
  }

  broadcastMessage(message) {
    const jsonMsg = JSON.stringify(message);
    this.peers.forEach(peer => peer.send(jsonMsg));
  }

  mineBlock() {
    // Stub mining (proof-of-work placeholder)
    const lastBlock = this.data.blockchain[this.data.blockchain.length - 1] || { hash: '0' };
    const newBlock = {
      index: this.data.blockchain.length,
      previousHash: lastBlock.hash,
      timestamp: Date.now(),
      transactions: this.data.messages.slice(),
      nonce: Math.floor(Math.random() * 1000000),
    };
    newBlock.hash = crypto.createHash('sha256').update(JSON.stringify(newBlock)).digest('hex');
    this.data.blockchain.push(newBlock);
    this.data.messages = [];
    this.persistData();
    this.emit('block-mined', newBlock);
  }
}

module.exports = CivicNode;


// --- 2. communityWallet.js ---
// Manages funds, transactions, keys, and UI hooks

const cryptoWallet = require('ethereumjs-wallet').default || require('ethereumjs-wallet');

class CommunityWallet {
  constructor(config) {
    this.config = config;
    this.walletFile = path.resolve(config.dataDir, 'wallet.json');
    this.keyPair = null;
    this.loadWallet();
    this.balance = 0; // off-chain simulated balance for demo
  }

  loadWallet() {
    if (fs.existsSync(this.walletFile)) {
      const data = JSON.parse(fs.readFileSync(this.walletFile));
      this.keyPair = cryptoWallet.fromPrivateKey(Buffer.from(data.privateKey, 'hex'));
    } else {
      this.createWallet();
    }
  }

  createWallet() {
    this.keyPair = cryptoWallet.generate();
    const privateKeyHex = this.keyPair.getPrivateKey().toString('hex');
    fs.writeFileSync(this.walletFile, JSON.stringify({ privateKey: privateKeyHex }));
  }

  getAddress() {
    return this.keyPair.getAddressString();
  }

  getBalance() {
    // Demo balance
    return this.balance;
  }

  sendFunds(amount, toAddress) {
    if (amount > this.balance) throw new Error('Insufficient funds');
    this.balance -= amount;
    // Normally would create and broadcast transaction here
    return true;
  }

  receiveFunds(amount) {
    this.balance += amount;
  }
}

module.exports = CommunityWallet;


// --- 3. aiEthics.js ---
// AI ethics enforcement (Fryboy Test & CivicVerse policy)

class AIEthics {
  constructor(config) {
    this.config = config;
    this.policyFile = path.resolve(config.dataDir, 'ethicsPolicy.json');
    this.policy = this.loadPolicy();
  }

  loadPolicy() {
    if (fs.existsSync(this.policyFile)) {
      return JSON.parse(fs.readFileSync(this.policyFile));
    }
    // Default policy - Fryboy Test basics
    return {
      bannedContent: ['hate', 'spam', 'malware'],
      maxMessageLength: 500,
      requireConsent: true,
    };
  }

  validateMessage(message) {
    if (typeof message.text !== 'string' || message.text.length === 0) return false;
    if (message.text.length > this.policy.maxMessageLength) return false;
    const txt = message.text.toLowerCase();
    for (const banned of this.policy.bannedContent) {
      if (txt.includes(banned)) return false;
    }
    return true;
  }
}

module.exports = AIEthics;


// --- 4. ui.jsx ---
// React 16-bit Streets of Rage inspired UI with mesh chat, wallet, and node status

import React, { useEffect, useState } from 'react';

const pixelFont = "'Press Start 2P', cursive";

function CivicUI({ node, wallet }) {
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState('');
  const [peersCount, setPeersCount] = useState(0);
  const [balance, setBalance] = useState(0);
  const [status, setStatus] = useState('Initializing...');

  useEffect(() => {
    node.on('message', (peerId, msg) => {
      setMessages(prev => [...prev, `${peerId}: ${msg.text}`]);
    });
    node.on('peer-connect', () => setPeersCount(node.peers.size));
    node.on('peer-disconnect', () => setPeersCount(node.peers.size));
    node.on('block-mined', block => setStatus(`Block #${block.index} mined!`));
    setBalance(wallet.getBalance());
  }, [node, wallet]);

  function sendMessage() {
    if (!input.trim()) return;
    const msgObj = { text: input.trim(), from: wallet.getAddress() };
    node.broadcastMessage(msgObj);
    setMessages(prev => [...prev, `Me: ${input.trim()}`]);
    setInput('');
  }

  const uiStyle = {
    fontFamily: pixelFont,
    background: '#222',
    color: '#0f0',
    minHeight: '100vh',
    padding: 20,
  };

  const chatBoxStyle = {
    border: '2px solid #0f0',
    background: '#000',
    height: 300,
    overflowY: 'auto',
    padding: 10,
    marginBottom: 10,
  };

  const inputStyle = {
    width: '70%',
    padding: 10,
    fontSize: 14,
    background: '#111',
    color: '#0f0',
    border: '2px solid #0f0',
  };

  const btnStyle = {
    marginLeft: 10,
    padding: '10px 20px',
    background: '#0f0',
    border: 'none',
    cursor: 'pointer',
    fontWeight: 'bold',
  };

  return (
    <div style={uiStyle}>
      <h1 style={{ textAlign: 'center' }}>CivicVerse Firestarter Alpha 3 v2.0</h1>
      <div style={chatBoxStyle}>
        {messages.map((m, i) => <div key={i}>{m}</div>)}
      </div>
      <input
        type="text"
        style={inputStyle}
        value={input}
        onChange={e => setInput(e.target.value)}
        onKeyDown={e => { if (e.key === 'Enter') sendMessage(); }}
        placeholder="Type your message..."
      />
      <button style={btnStyle} onClick={sendMessage}>Send</button>
      <div style={{ marginTop: 20 }}>
        <strong>Peers connected:</strong> {peersCount}<br />
        <strong>Wallet balance:</strong> {balance} CVT<br />
        <strong>Status:</strong> {status}
      </div>
    </div>
  );
}

export default CivicUI;


// --- 5. README.md ---

/*
# CivicVerse Alpha 3 Firestarter v2.0

## Overview
CivicVerse Alpha 3 Firestarter v2.0 is a decentralized peer-to-peer mesh network node daemon with integrated community wallet and AI ethics enforcement based on the Fryboy Test. The UI is inspired by 16-bit Streets of Rage aesthetics to keep it nostalgic and cool.

## Features
- Peer-to-peer mesh networking with NAT traversal using WebSockets and SimplePeer
- Community wallet with secure key management and simulated transaction balance
- AI ethics enforcement module with policy validation to prevent malicious messaging
- 16-bit Streets of Rage style React UI dashboard with real-time peer, message, wallet, and node status display
- Local data persistence and mining stub (proof-of-work simulation)
- Designed for Windows 11 compatibility and easy packaging with tools like pkg or PyInstaller

## Setup
1. Clone the repo.
2. Run `npm install` to install dependencies (`ws`, `simple-peer`, `react`, `ethereumjs-wallet`, etc.).
3. Configure `config.json` with your signaling server URL and data directory.
4. Start signaling server (if you don't have one, a basic Node.js WebSocket server must be deployed).
5. Run the node daemon: `node coreNode.js`
6. Start the React app: `npm start`
7. Open the React UI and connect to your node.

## Usage
- Chat with peers on the mesh network.
- Monitor your community wallet balance.
- View mining and block creation events.
- Messages violating AI ethics policies are logged and rejected.

## License
MIT License

## Contact
CivicVerse Development Team

*/

// --- 6. config.json ---

{
  "signalingServer": "wss://your-signaling-server.com",
  "dataDir": "./data"
}

// ===== END OF BUNDLE =====

Built with ❤️ for the CivicVerse.
